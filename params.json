{"name":"Yannick Meine","tagline":"Personal IT projects.","body":"Here you will find a set of links to my [active IT projects](#active-projects), with quick description, hoping that you can easily find something interesting.\r\n\r\nIn addition you can see what are the plans for my [future projects](#idead).\r\n\r\n# Active projects\r\n\r\n* [OOP](https://github.com/ymeine/oop): OOP and raw objects manipulation library, creating types and fluent API\r\n* [HTTP Server](https://github.com/ymeine/http-server): an abstraction of a HTTP server (using lower-level libraries), centered on the concept of routes\r\n\r\n# Ideas\r\n\r\n1. __Project template__: a project containing only the scaffolding for all my new projects\r\n1. __Git project extraction__ ([see below](#git-project-extraction))\r\n1. __STD Utils__: a small custom standard library (for strings, native arrays, numbers, native types, ...)\r\n1. __Collections__: arrays, objects, graphs, indexes, etc. are all collections.\r\n1. __Graph library__: the graph is a specific kind of collection, more complex, with more properties, rules, ...\r\n1. __Documentation generator for the [OOP library](https://github.com/ymeine/oop)__: generating documentation files from introspection of OOP elements specifications\r\n* ...\r\n\r\n## Git project extraction\r\n\r\nThis project is a little complex and comes from a requirement for the [OOP project](https://github.com/ymeine/oop). This is inspired from [`git filter-branch`](http://git-scm.com/docs/git-filter-branch).\r\n\r\nHowever the idea is simple: the user can specify a set of files he wants to keep, from any commit, and the whole history is rewritten keeping only those files. This process would also: \r\n\r\n* preserve authoring dates\r\n* for each created commit put the _highest_ file at the root\r\n\r\nThis __MUST__ handle nicely refactoring, that is file renames (and movements of course). For that it should use the git file log feature, since these are computed things (in the Git system there is no link between two versions of a file or a content, just between commits)\r\n\r\nThis way you can extract a sub-project with its whole own history, keeping all possible dependencies that could have been removed at some point (that's why you can specify files from older commits) - to have a consistent state at each commit.\r\n\r\nAlso, the interface of this tool should provide a way to easily reedit commit messages while previewing the snapshot for each commit.\r\n\r\nFor all that, plumbing commands like [`git commit-tree`](http://git-scm.com/docs/git-commit-tree) or [`git rev-list`](http://git-scm.com/docs/git-rev-list) should be enough.\r\n\r\n### Example\r\n\r\nInitial state: \r\n\r\n```\r\ncommit 1, 16-10-13\r\n    - removed 1\r\n        - ...\r\n    - removed 2\r\n    - folder\r\n        - keep 2\r\n    - keep 1\r\n\r\ncommit 2, 17-10-13\r\n    - removed 1\r\n        - ...\r\n    - removed 2\r\n    - folder\r\n        - keep 2\r\n```\r\n\r\nAfter running the tool by specifying you want to keep `keep1` from commit 1 and `keep2` from commit 2, it would give: \r\n\r\n```\r\ncommit 1, 16-10-13\r\n    - folder\r\n        - keep 2\r\n    - keep 1\r\n\r\ncommit 2, 17-10-13\r\n    - keep 2\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}